{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/cocos-observer/assets/ColorProvider.ts"],"names":["_decorator","Component","Color","director","Sprite","ccclass","property","ColorProvider","onLoad","_instance","addPersistRootNode","node","destroy","console","warn","getInstance","error","getColor","type","colors","length","clone","WHITE","changeColor","sprite","getComponent","color"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,Q,OAAAA,Q;AAAgBC,MAAAA,M,OAAAA,M;;;;;;;;;OACjD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;+BAGjBO,a,WADZF,OAAO,CAAC,eAAD,C,UAIHC,QAAQ,CAAC,CAACJ,KAAD,CAAD,C,sCAJb,MACaK,aADb,SACmCN,SADnC,CAC6C;AAAA;AAAA;;AAAA;AAAA;;AAMzCO,QAAAA,MAAM,GAAG;AACL,cAAID,aAAa,CAACE,SAAd,KAA4B,IAAhC,EAAsC;AAClCF,YAAAA,aAAa,CAACE,SAAd,GAA0B,IAA1B;AACAN,YAAAA,QAAQ,CAACO,kBAAT,CAA4B,KAAKC,IAAjC;AACH,WAHD,MAGO;AACH,iBAAKC,OAAL;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,gDAAb;AACH;AACJ;;AAEwB,eAAXC,WAAW,GAAkB;AACvC,cAAI,CAACR,aAAa,CAACE,SAAnB,EAA8B;AAC1BI,YAAAA,OAAO,CAACG,KAAR,CAAc,gDAAd;AACH;;AACD,iBAAOT,aAAa,CAACE,SAArB;AACH;;AAEMQ,QAAAA,QAAQ,CAACC,IAAD,EAAsB;AACjC,cAAIA,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAG,KAAKC,MAAL,CAAYC,MAApC,EAA4C;AACxC,mBAAO,KAAKD,MAAL,CAAYD,IAAZ,EAAkBG,KAAlB,EAAP;AACH,WAFD,MAEO;AACHR,YAAAA,OAAO,CAACC,IAAR,mBAA6BI,IAA7B;AACA,mBAAOhB,KAAK,CAACoB,KAAN,CAAYD,KAAZ,EAAP;AACH;AACJ;;AAEME,QAAAA,WAAW,CAACL,IAAD,EAAeP,IAAf,EAA2B;AACzC,cAAMa,MAAM,GAAGb,IAAI,CAACc,YAAL,CAAkBrB,MAAlB,CAAf;;AACA,cAAIoB,MAAJ,EAAY;AACRA,YAAAA,MAAM,CAACE,KAAP,GAAenB,aAAa,CAACQ,WAAd,GAA4BE,QAA5B,CAAqCC,IAArC,CAAf;AACH,WAFD,MAEO;AACHL,YAAAA,OAAO,CAACG,KAAR,CAAc,4CAAd;AACH;AACJ;;AAvCwC,O,UAC1BP,S,GAAkC,I;;;;;iBAGxB,E","sourcesContent":["import { _decorator, Component, Color, director, Node, Sprite } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"ColorProvider\")\nexport class ColorProvider extends Component {\n    private static _instance: ColorProvider | null = null;\n\n    @property([Color])\n    public colors: Color[] = [];\n\n    onLoad() {\n        if (ColorProvider._instance === null) {\n            ColorProvider._instance = this;\n            director.addPersistRootNode(this.node);\n        } else {\n            this.destroy();\n            console.warn(\"Only one instance of ColorProvider is allowed.\");\n        }\n    }\n\n    public static getInstance(): ColorProvider {\n        if (!ColorProvider._instance) {\n            console.error(\"ColorProvider instance is not yet initialized.\");\n        }\n        return ColorProvider._instance!;\n    }\n\n    public getColor(type: number): Color {\n        if (type >= 0 && type < this.colors.length) {\n            return this.colors[type].clone();\n        } else {\n            console.warn(`Invalid type ${type}. Returning default color.`);\n            return Color.WHITE.clone(); \n        }\n    }\n\n    public changeColor(type: number, node: Node) {\n        const sprite = node.getComponent(Sprite);\n        if (sprite) {\n            sprite.color = ColorProvider.getInstance().getColor(type);\n        } else {\n            console.error(\"The node does not have a Sprite component.\");\n        }\n    }\n}\n"]}