{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/cocos-observer/assets/GridManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","UITransform","Cell","ccclass","property","GridManager","levelConfig","start","createGrid","cellPrefab","parentNode","console","error","cellSize","data","getComponent","contentSize","startX","length","width","cellSpacing","startY","height","row","col","type","cellNode","cellComp","init","posX","posY","setPosition","addChild"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, Vec3, UITransform, Sprite, Color } from 'cc';\nimport { Cell } from './Cell';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridManager')\nexport class GridManager extends Component {\n    @property(Prefab)\n    public cellPrefab: Prefab = null;\n\n    @property(Node)\n    public parentNode: Node = null;\n\n    private levelConfig: number[][] = [\n        [0, 0, 1, 0, 0],\n        [0, 1, 0, 1, 0],\n        [0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 1],\n        [0, 0, 0, 0, 1],\n\n    ];\n\n    @property\n    public cellSpacing: number = 10;\n\n\n    start() {\n        this.createGrid();\n    }\n\n    private createGrid() {\n        if (!this.cellPrefab || !this.parentNode) {\n            console.error('where the fuck is parent and cellPrefab?');\n            return;\n        }\n    \n        const cellSize = this.cellPrefab.data.getComponent(UITransform).contentSize;\n        const startX = -((this.levelConfig[0].length - 1) * (cellSize.width + this.cellSpacing)) / 2;\n        const startY = -((this.levelConfig.length - 1) * (cellSize.height + this.cellSpacing)) / 2;\n    \n        for (let row = 0; row < this.levelConfig.length; row++) {\n            for (let col = 0; col < this.levelConfig[row].length; col++) {\n                const type = this.levelConfig[this.levelConfig.length - 1 - row][this.levelConfig[row].length - 1 - col];\n                const cellNode = instantiate(this.cellPrefab);\n                const cellComp = cellNode.getComponent(Cell);\n                cellComp.init(type);\n    \n                const posX = startX + col * (cellSize.width + this.cellSpacing);\n                const posY = startY + row * (cellSize.height + this.cellSpacing);\n    \n                cellNode.setPosition(new Vec3(posX, posY, 0));\n                this.parentNode.addChild(cellNode);\n            }\n        }\n    }\n    \n}\n"]}