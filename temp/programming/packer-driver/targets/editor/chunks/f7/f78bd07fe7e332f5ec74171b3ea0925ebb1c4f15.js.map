{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/cocos-observer/assets/GridManager.ts"],"names":["_decorator","Component","Node","Prefab","instantiate","Vec3","UITransform","Cell","ccclass","property","GridManager","start","createGrid","cellPrefab","parentNode","console","error","cellSize","data","getComponent","contentSize","startX","levelConfig","length","width","cellSpacing","startY","height","row","col","type","cellNode","cellComp","init","posX","posY","setPosition","addChild"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, Vec3, UITransform, Sprite, Color } from 'cc';\nimport { Cell } from './Cell';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GridManager')\nexport class GridManager extends Component {\n    @property(Prefab)\n    public cellPrefab: Prefab = null;\n\n    @property(Node)\n    public parentNode: Node = null;\n\n    @property\n    public levelConfig: number[][] = [\n        [0, 1, 2, 1, 0],\n        [0, 1, 2, 1, 0],\n        [0, 1, 2, 1, 0],\n        [0, 1, 2, 1, 0],\n        [0, 0, 0, 0, 0],\n    ];\n\n    @property\n    public cellSpacing: number = 10;\n\n\n    start() {\n        this.createGrid();\n    }\n\n    private createGrid() {\n        if (!this.cellPrefab || !this.parentNode) {\n            console.error('where the fuck is parent and cellPrefab?');\n            return;\n        }\n\n        const cellSize = this.cellPrefab.data.getComponent(UITransform).contentSize;\n        const startX = -((this.levelConfig[0].length - 1) * (cellSize.width + this.cellSpacing)) / 2;\n        const startY = -((this.levelConfig.length - 1) * (cellSize.height + this.cellSpacing)) / 2;\n\n        for (let row = 0; row < this.levelConfig.length; row++) {\n            for (let col = 0; col < this.levelConfig[row].length; col++) {\n                const type = this.levelConfig[row][col];\n                const cellNode = instantiate(this.cellPrefab);\n                const cellComp = cellNode.getComponent(Cell)\n                cellComp.init(type);\n                const posX = startX + col * (cellSize.width + this.cellSpacing);\n                const posY = startY + row * (cellSize.height + this.cellSpacing);\n                cellNode.setPosition(new Vec3(posX, posY, 0));\n                this.parentNode.addChild(cellNode);\n            }\n        }\n    }\n}\n"]}