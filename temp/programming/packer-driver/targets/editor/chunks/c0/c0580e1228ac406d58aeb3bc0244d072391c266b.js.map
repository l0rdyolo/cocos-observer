{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/cocos-observer/assets/ColorProvider.ts"],"names":["_decorator","Component","Color","director","Sprite","ccclass","property","ColorProvider","onLoad","_instance","addPersistRootNode","node","destroy","console","warn","getInstance","error","getColor","type","color1","clone","color2","color3","color4","color5","color6","ground","highlight","WHITE","changeColor","sprite","getComponent","color","log","RED","GREEN","BLUE","YELLOW","CYAN","MAGENTA"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,Q,OAAAA,Q;AAA+BC,MAAAA,M,OAAAA,M;;;;;;;;;OAChE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;+BAGjBO,a,WADZF,OAAO,CAAC,eAAD,C,sCAAR,MACaE,aADb,SACmCN,SADnC,CAC6C;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AA2BzCO,QAAAA,MAAM,GAAG;AACL,cAAID,aAAa,CAACE,SAAd,KAA4B,IAAhC,EAAsC;AAClCF,YAAAA,aAAa,CAACE,SAAd,GAA0B,IAA1B;AACAN,YAAAA,QAAQ,CAACO,kBAAT,CAA4B,KAAKC,IAAjC;AACH,WAHD,MAGO;AACH,iBAAKC,OAAL;AACAC,YAAAA,OAAO,CAACC,IAAR,CAAa,gDAAb;AACH;AACJ;;AAEwB,eAAXC,WAAW,GAAkB;AACvC,cAAI,CAACR,aAAa,CAACE,SAAnB,EAA8B;AAC1BI,YAAAA,OAAO,CAACG,KAAR,CAAc,gDAAd;AACH;;AACD,iBAAOT,aAAa,CAACE,SAArB;AACH;;AAEMQ,QAAAA,QAAQ,CAACC,IAAD,EAAsB;AACjC,kBAAQA,IAAR;AACI,iBAAK,CAAL;AAAQ,qBAAO,KAAKC,MAAL,CAAYC,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKC,MAAL,CAAYD,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKE,MAAL,CAAYF,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKG,MAAL,CAAYH,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKI,MAAL,CAAYJ,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKK,MAAL,CAAYL,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKM,MAAL,CAAYN,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKO,SAAL,CAAeP,KAAf,EAAP;;AACR;AAAS,qBAAOlB,KAAK,CAAC0B,KAAN,CAAYR,KAAZ,EAAP;AATb;AAWH;;AAEMS,QAAAA,WAAW,CAACX,IAAD,EAAiBP,IAAjB,EAA6B;AAC3C,gBAAMmB,MAAM,GAAGnB,IAAI,CAACoB,YAAL,CAAkB3B,MAAlB,CAAf;;AACA,cAAG0B,MAAH,EAAU;AACNA,YAAAA,MAAM,CAACE,KAAP,GAAezB,aAAa,CAACQ,WAAd,GAA4BE,QAA5B,CAAqCC,IAArC,CAAf;AACH,WAFD,MAGI;AACAL,YAAAA,OAAO,CAACoB,GAAR,CAAY,wBAAZ;AAEH;AACJ;;AAnEwC,O,UAC1BxB,S,GAAkC,I,mFAEhDH,Q;;;;;iBACsBJ,KAAK,CAACgC,GAAN,CAAUd,KAAV,E;;iFAEtBd,Q;;;;;iBACsBJ,KAAK,CAACiC,KAAN,CAAYf,KAAZ,E;;iFAEtBd,Q;;;;;iBACsBJ,KAAK,CAACkC,IAAN,CAAWhB,KAAX,E;;iFAEtBd,Q;;;;;iBACsBJ,KAAK,CAACmC,MAAN,CAAajB,KAAb,E;;iFAEtBd,Q;;;;;iBACsBJ,KAAK,CAACoC,IAAN,CAAWlB,KAAX,E;;iFAEtBd,Q;;;;;iBACsBJ,KAAK,CAACqC,OAAN,CAAcnB,KAAd,E;;iFAEtBd,Q;;;;;iBACsBJ,KAAK,CAACqC,OAAN,CAAcnB,KAAd,E;;oFAEtBd,Q;;;;;iBACyBJ,KAAK,CAACqC,OAAN,CAAcnB,KAAd,E","sourcesContent":["import { _decorator, Component, Color, director , Node, MeshRenderer, Sprite } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"ColorProvider\")\nexport class ColorProvider extends Component {\n    private static _instance: ColorProvider | null = null;\n\n    @property\n    public color1: Color = Color.RED.clone();\n\n    @property\n    public color2: Color = Color.GREEN.clone();\n\n    @property\n    public color3: Color = Color.BLUE.clone();\n\n    @property\n    public color4: Color = Color.YELLOW.clone();\n\n    @property\n    public color5: Color = Color.CYAN.clone();\n\n    @property\n    public color6: Color = Color.MAGENTA.clone();\n\n    @property\n    public ground: Color = Color.MAGENTA.clone();\n    \n    @property\n    public highlight: Color = Color.MAGENTA.clone();\n    \n    onLoad() {\n        if (ColorProvider._instance === null) {\n            ColorProvider._instance = this;\n            director.addPersistRootNode(this.node);\n        } else {\n            this.destroy();\n            console.warn(\"Only one instance of ColorProvider is allowed.\");\n        }\n    }\n\n    public static getInstance(): ColorProvider {\n        if (!ColorProvider._instance) {\n            console.error(\"ColorProvider instance is not yet initialized.\");\n        }\n        return ColorProvider._instance!;\n    }\n\n    public getColor(type: number): Color {\n        switch (type) {\n            case 0: return this.color1.clone();\n            case 1: return this.color2.clone();\n            case 2: return this.color3.clone();\n            case 3: return this.color4.clone();\n            case 4: return this.color5.clone();\n            case 5: return this.color6.clone();\n            case 6: return this.ground.clone();\n            case 7: return this.highlight.clone();\n            default: return Color.WHITE.clone();\n        }\n    }\n\n    public changeColor(type : number , node : Node){\n        const sprite = node.getComponent(Sprite)\n        if(sprite){\n            sprite.color = ColorProvider.getInstance().getColor(type);\n        }\n        else{\n            console.log(\"wtf?  sprite is not fo\");\n            \n        }\n    }\n}"]}