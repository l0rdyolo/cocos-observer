{"version":3,"sources":["file:///C:/Users/maide/OneDrive/Documents/GitHub/cocos-observer/assets/ColorProvider.ts"],"names":["_decorator","Component","Color","Sprite","ccclass","property","ColorProvider","getColor","type","color1","clone","color2","color3","color4","color5","color6","ground","highlight","WHITE","changeColor","node","sprite","getComponent","color","console","log","name","RED","GREEN","BLUE","YELLOW","CYAN","MAGENTA"],"mappings":";;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,K,OAAAA,K;AAAsCC,MAAAA,M,OAAAA,M;;;;;;;;;OAChE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;+BAGhBM,a,WADbF,OAAO,CAAC,eAAD,C,sCAAR,MACcE,aADd,SACoCL,SADpC,CAC8C;AA6BpB,eAARM,QAAQ,CAACC,IAAD,EAAsB;AACxC,kBAAQA,IAAR;AACI,iBAAK,CAAL;AAAQ,qBAAO,KAAKC,MAAL,CAAYC,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKC,MAAL,CAAYD,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKE,MAAL,CAAYF,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKG,MAAL,CAAYH,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKI,MAAL,CAAYJ,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKK,MAAL,CAAYL,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKM,MAAL,CAAYN,KAAZ,EAAP;;AACR,iBAAK,CAAL;AAAQ,qBAAO,KAAKO,SAAL,CAAeP,KAAf,EAAP;;AACR;AAAS,qBAAOR,KAAK,CAACgB,KAAN,CAAYR,KAAZ,EAAP;AATb;AAWH;;AAEwB,eAAXS,WAAW,CAACX,IAAD,EAAiBY,IAAjB,EAA6B;AAClD,gBAAMC,MAAM,GAAGD,IAAI,CAACE,YAAL,CAAkBnB,MAAlB,CAAf;;AACA,cAAGkB,MAAH,EAAU;AACNA,YAAAA,MAAM,CAACE,KAAP,GAAejB,aAAa,CAACC,QAAd,CAAuBC,IAAvB,CAAf;AACAgB,YAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,IAAjB,EAAwB,kBAAxB;AAEH,WAJD,MAKI;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;AACJ;;AArDyC,O,UAG5BhB,M,GAAgBP,KAAK,CAACyB,GAAN,CAAUjB,KAAV,E,UAGhBC,M,GAAgBT,KAAK,CAAC0B,KAAN,CAAYlB,KAAZ,E,UAGhBE,M,GAAgBV,KAAK,CAAC2B,IAAN,CAAWnB,KAAX,E,UAGhBG,M,GAAgBX,KAAK,CAAC4B,MAAN,CAAapB,KAAb,E,UAGhBI,M,GAAgBZ,KAAK,CAAC6B,IAAN,CAAWrB,KAAX,E,UAGhBK,M,GAAgBb,KAAK,CAAC8B,OAAN,CAActB,KAAd,E,UAGhBM,M,GAAgBd,KAAK,CAAC8B,OAAN,CAActB,KAAd,E,UAGhBO,S,GAAmBf,KAAK,CAAC8B,OAAN,CAActB,KAAd,E,2DAtBhCL,Q;;;;;;;kEAGAA,Q;;;;;;;kEAGAA,Q;;;;;;;kEAGAA,Q;;;;;;;kEAGAA,Q;;;;;;;kEAGAA,Q;;;;;;;kEAGAA,Q;;;;;;;qEAGAA,Q","sourcesContent":["import { _decorator, Component, Color, director , Node, MeshRenderer, Sprite } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"ColorProvider\")\nexport class  ColorProvider extends Component {\n\n    @property\n    public static color1: Color = Color.RED.clone();\n\n    @property\n    public static color2: Color = Color.GREEN.clone();\n\n    @property\n    public static color3: Color = Color.BLUE.clone();\n\n    @property\n    public static color4: Color = Color.YELLOW.clone();\n\n    @property\n    public static color5: Color = Color.CYAN.clone();\n\n    @property\n    public static color6: Color = Color.MAGENTA.clone();\n\n    @property\n    public static ground: Color = Color.MAGENTA.clone();\n    \n    @property\n    public static highlight: Color = Color.MAGENTA.clone();\n    \n\n\n\n    public static getColor(type: number): Color {\n        switch (type) {\n            case 0: return this.color1.clone();\n            case 1: return this.color2.clone();\n            case 2: return this.color3.clone();\n            case 3: return this.color4.clone();\n            case 4: return this.color5.clone();\n            case 5: return this.color6.clone();\n            case 6: return this.ground.clone();\n            case 7: return this.highlight.clone();\n            default: return Color.WHITE.clone();\n        }\n    }\n\n    public static changeColor(type : number , node : Node){\n        const sprite = node.getComponent(Sprite)\n        if(sprite){\n            sprite.color = ColorProvider.getColor(type);\n            console.log(node.name , \"is changed color\");\n            \n        }\n        else{\n            console.log(\"wtf?  sprite is not fo\");\n        }\n    }\n}"]}